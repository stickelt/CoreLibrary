@namespace Stickelt.CoreComponents.Components
@using Stickelt.CoreComponents.Services
@using System.Diagnostics
@inject IDynamicRouteService RouteService

@if (_componentType != null)
{
    <DynamicComponent Type="@_componentType" Parameters="@_parameters" />
}
else
{
    <div class="dynamic-router-error not-found">
        <h2>Page Not Found</h2>
        <p>Could not find a component for route: @Route</p>
        
        <h3>Debug Information:</h3>
        <div class="debug-info">
            <p>Route: '@Route'</p>
            <p>Component Type: @(_componentType?.FullName ?? "null")</p>
            <p>Available Routes Count: @(RouteService.GetAvailableRoutes()?.Count() ?? 0)</p>
        </div>
        
        <h3>Available Routes:</h3>
        <ul>
            @foreach (var route in RouteService.GetAvailableRoutes())
            {
                <li><a href="@($"/dynamic{route}")">@route</a></li>
            }
        </ul>
    </div>
}

@code {
    [Parameter]
    public string Route { get; set; }
    
    private Type _componentType;
    private Dictionary<string, object> _parameters;
    
    protected override void OnParametersSet()
    {
        Debug.WriteLine($"DynamicRouter received route: '{Route}'");
        
        try
        {
            // Get the component type for this route
            _componentType = RouteService.GetComponentTypeForRoute(Route);
            Debug.WriteLine($"Component type resolved: {(_componentType != null ? _componentType.FullName : "null")}");
            
            if (_componentType != null)
            {
                // Get the configuration for this route
                var config = RouteService.GetConfigurationForRoute(Route);
                Debug.WriteLine($"Configuration for route: {(config != null ? "Found" : "Not found")}");
                
                // Prepare parameters to pass to the dynamic component
                _parameters = new Dictionary<string, object>();
                if (config != null)
                {
                    _parameters.Add("Configuration", config);
                    Debug.WriteLine($"Added configuration parameter: {config.Title}");
                }
            }
            else
            {
                Debug.WriteLine($"Failed to find component for route: '{Route}'");
            }
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"Error in DynamicRouter: {ex.Message}");
            Debug.WriteLine(ex.StackTrace);
        }
        
        base.OnParametersSet();
    }
} 