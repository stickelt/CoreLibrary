@page "/"
@namespace Stickelt.CoreComponents.Components
@using Stickelt.CoreComponents.Services
@using Microsoft.Extensions.Configuration

@inject IConfigurationService ConfigService
@inject IConfiguration Configuration

<PageTitle>Home</PageTitle>

<VersionDisplay />

<div style="border: 3px solid red; padding: 10px; margin: 10px;">
    <h2 style="color: red;">LOCAL VERSION INDICATOR</h2>
    <p>This text only appears in the local package version. If you see this, you're using the local NuGet package!</p>
    <p>Build timestamp: @DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")</p>
    <p style="background-color: yellow; padding: 5px; font-weight: bold;">AUTO-UPDATING DEV VERSION: Build time @DateTime.Now.ToString("HH:mm:ss.fff") - No version numbers to update manually!</p>
</div>

<PackageSourceChecker />

@if(string.IsNullOrEmpty(ApplicationNameFromConfigService) && 
    string.IsNullOrEmpty(ApplicationNameFromConfig) && 
    string.IsNullOrEmpty(ApplicationName))
{
    <h3>Configuration is null</h3>
}
else 
{
    <h1>@(ApplicationNameFromConfigService ?? ApplicationNameFromConfig ?? ApplicationName ?? "Application Name Not Found")</h1>
    
    <h1>Hello, world!</h1>

    <p>Welcome to your new app.</p>

    <p>New changes here to Home.razor in the CoreComponents</p>

    <p>New changes @DateTime.Now  :  these are from the local home again now OK nope</p>

    <p style="font-weight: bold; color: green;">Application has been successfully rebuilt and is now working properly!</p>

    <p>monday test</p>
}

@code {
    // Optional parameters that can be passed from the consuming application
    [Parameter]
    public string Title { get; set; } = "Home";

    [Parameter]
    public string ApplicationName { get; set; } = "";
    
    private string ApplicationNameFromConfigService { get; set; }
    private string ApplicationNameFromConfig { get; set; }

    protected override void OnInitialized()
    {
        try 
        {
            // Try to get the application name using ConfigService
            if (ConfigService != null)
            {
                var appSettings = ConfigService.GetSection("AppSettings");
                if (appSettings != null)
                {
                    ApplicationNameFromConfigService = appSettings["ApplicationName"];
                }
            }
            
            // Fallback to direct IConfiguration if ConfigService is not available
            if (string.IsNullOrEmpty(ApplicationNameFromConfigService) && Configuration != null)
            {
                ApplicationNameFromConfig = Configuration["AppSettings:ApplicationName"];
            }
        }
        catch
        {
            // Silently handle any configuration errors
            ApplicationNameFromConfigService = null;
            ApplicationNameFromConfig = null;
        }
        
        base.OnInitialized();
    }
}
